// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// Gaussian
double Gaussian(double mu, double sigma);
RcppExport SEXP _StatComp20056_Gaussian(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Gaussian(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// lap
double lap(double x);
RcppExport SEXP _StatComp20056_lap(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(lap(x));
    return rcpp_result_gen;
END_RCPP
}
// metro
List metro(int n, double sigma, double x0);
RcppExport SEXP _StatComp20056_metro(SEXP nSEXP, SEXP sigmaSEXP, SEXP x0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type x0(x0SEXP);
    rcpp_result_gen = Rcpp::wrap(metro(n, sigma, x0));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_StatComp20056_Gaussian", (DL_FUNC) &_StatComp20056_Gaussian, 2},
    {"_StatComp20056_lap", (DL_FUNC) &_StatComp20056_lap, 1},
    {"_StatComp20056_metro", (DL_FUNC) &_StatComp20056_metro, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatComp20056(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
